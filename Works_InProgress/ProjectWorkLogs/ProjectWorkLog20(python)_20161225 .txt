Title:				Project Work Log20
Project Description:		LANDIS-II upgrades/corrections
Project ID:			2016SoE021
Author:				bmarron
Origin Date:			24 Dec 2016
Revision Date:					


#########################################################################
Log:
LANDVIZ -- python
#########################################################################


	a. update spyder
$ conda install -c anaconda spyder=3.0.2 

Fetching package metadata .........
Solving package specifications: ..........

Package plan for installation in environment /home/bmarron/anaconda2:

The following packages will be downloaded:

    package                    |            build
    ---------------------------|-----------------
    anaconda-custom            |           py27_0           3 KB  anaconda
    spyder-3.0.2               |           py27_0         3.0 MB  anaconda
    ------------------------------------------------------------
                                           Total:         3.0 MB

The following packages will be UPDATED:

    anaconda: 4.2.0-np111py27_0 --> custom-py27_0 anaconda
    spyder:   3.0.0-py27_0      --> 3.0.2-py27_0  anaconda


	b. Saving structured data with json
https://docs.python.org/2/tutorial/inputoutput.html



	c. float info 
https://docs.python.org/2/library/sys.html


	d. paths
https://docs.python.org/2/library/sys.html

sys.path
A list of strings that specifies the search path for modules. Initialized from the environment variable PYTHONPATH, 
plus an installation-dependent default. As initialized upon program startup, the first item of this list, path[0], 
is the directory containing the script  that was used to invoke the Python interpreter. If the script directory is not 
available (e.g. if the interpreter is invoked interactively or if the script is read from standard input),
path[0] is the empty string, which directs Python to search modules in the current directory first. 
Notice that the script directory is inserted before the entries inserted as a result of PYTHONPATH.

In [13]: sys.path[0]
Out[13]: ''

In [14]: sys.path[1]
Out[14]: '/home/bmarron/anaconda2/lib/python2.7/site-packages/spyder/utils/site'

In [15]: sys.path[2]
Out[15]: '/home/bmarron/anaconda2/lib/python27.zip'

In [16]: sys.path[3]
Out[16]: '/home/bmarron/anaconda2/lib/python2.7'

In [17]: sys.path[4]
Out[17]: '/home/bmarron/anaconda2/lib/python2.7/plat-linux2'


	e. starting Ipython with Spyder
https://docs.python.org/2/library/sys.html

sys.argv[0]
Out[18]: '/home/bmarron/anaconda2/lib/python2.7/site-packages/spyder/utils/ipython/start_kernel.py'
 



	f. Classes and __ini__
	f1. NOTE error!! Must INSTANTIATE the class to access the methods (eg, x = MyClass() )!!
http://stackoverflow.com/questions/625083/python-init-and-self-what-do-they-do
https://docs.python.org/2/tutorial/classes.html
https://docs.python.org/2/reference/datamodel.html#object.__init__


__new__() and __init__() work together in constructing objects (__new__() to create it (automatic unless messed with), and __init__() to customise it)

Many classes like to create objects with instances customized to a specific initial state. 
Therefore a class may define a special method (ie a function keyed to a Class object) 
named "__init__()"

When a class defines an __init__() method, class instantiation automatically invokes __init__() 
for the newly-created class instance.

the __init__() method may have arguments for greater flexibility. In that case, arguments 
given to the class instantiation operator are passed on to __init__(). 

__init__ is what is called as a constructor in other OOP languages such as C#/Java. 
The basic idea is that it is a special method which is automatically called when an object of that Class is created



#%%_________________________________________________
class MyClass:
    """A simple example class"""
    i = 12345

    def __init__(self):
        self.data = [1,2,3,4,5]		#a list

    def f(self):
        print 'hello world'
________________________________________________________
	
In [44]: MyClass.f()
Traceback (most recent call last):

  File "<ipython-input-44-320d7344e9c3>", line 1, in <module>
    MyClass.f()

TypeError: unbound method f() must be called with MyClass instance as first argument (got nothing instead)


In [53]: x=MyClass()

In [54]: x.data
Out[54]: [1, 2, 3, 4, 5]

In [55]: x.f
Out[55]: <bound method MyClass.f of <__main__.MyClass instance at 0xac205e2c>>

In [56]: x.f()
hello world


In [57]: x.i
Out[57]: 12345



#%%_________________________________________________
class Complex:
    def __init__(self, realpart, imagpart):
        self.r = realpart   
        self.i = imagpart
_____________________________________________________

In [58]: x = Complex(3.0, -4.5)

In [59]: x.r, x.i
Out[59]: (3.0, -4.5)



#%%_________________________________________
class MyClass2(object):
     i = 123
     def __init__(self):
         self.i = 345
_____________________________________________
a = MyClass2()
print a.i
345
print MyClass.i





	g. sequences, tuples, lists, dictionaries
https://docs.python.org/2/reference/datamodel.html#object.__init__
https://docs.python.org/2/tutorial/datastructures.html


immutable:
Tuples ==> formed by comma-separated lists of expressions (... , ... , ... , )
empty tuple ==> an empty pair of parentheses ().



Dictionaries are indexed by keys, which can be any immutable type; strings and numbers can always be keys. 
A dictionary is an unordered set of {key: value} pairs, with the requirement that the keys are unique (within one dictionary). 
A pair of braces creates an empty dictionary: {}. 
Dictionaries created by the {...} notation


mutable:
Lists 	==> formed by placing a comma-separated list of expressions in square brackets [ ... , ... , ... ,  ] .
	==> Sequences, indexed by a range of numbers


In [22]: q=(12,13)
In [23]: r=[12, 13]




In [15]: questions = ['name', 'quest', 'favorite color']		#a sequence (a list)
    ...: answers = ['lancelot', 'the holy grail', 'blue']		#a sequence (a list)
    ...: for q, a in zip(questions, answers):
    ...:     print 'What is your {0}?  It is {1}.'.format(q, a)
    ...: 
    ...: 
What is your name?  It is lancelot.
What is your quest?  It is the holy grail.
What is your favorite color?  It is blue.



	h. directory vs file search (Linux-based)
In [9]: os.path.exists('/home/bmarron/Desktop/BAU_10-14/Charles_preproc-and-bat-files/preproc_VizTool.xml/')
Out[9]: False

In [10]: os.path.exists('/home/bmarron/Desktop/BAU_10-14/Charles_preproc-and-bat-files/preproc_VizTool.xml')
Out[10]: True



In [14]: os.path.isdir('/home/bmarron/Desktop/BAU_10-14/Charles_preproc-and-bat-files/preproc_VizTool.xml/')
Out[14]: False

In [15]: os.path.isfile('/home/bmarron/Desktop/BAU_10-14/Charles_preproc-and-bat-files/preproc_VizTool.xml/')
Out[15]: False

In [16]: os.path.isfile('/home/bmarron/Desktop/BAU_10-14/Charles_preproc-and-bat-files/preproc_VizTool.xml')
Out[16]: True

In [17]: os.path.isdir('/home/bmarron/Desktop/BAU_10-14/Charles_preproc-and-bat-files/preproc_VizTool.xml')
Out[17]: False



	i. freeze module, creating stand-alone binary, PyInstaller
https://docs.python.org/2/faq/programming.html#general-questions


You don’t need the ability to compile Python to C code if all you want is a stand-alone program that users can download and run without having to install the Python distribution first. There are a number of tools that determine the set of modules required by a program and bind these modules together with a Python binary to produce a single executable.

One is to use the freeze tool, which is included in the Python source tree as Tools/freeze. It converts Python byte code to C arrays; a C compiler you can embed all your modules into a new program, which is then linked with the standard Python modules.

It works by scanning your source recursively for import statements (in both forms) and looking for the modules in the standard Python path as well as in the source directory (for built-in modules). It then turns the bytecode for modules written in Python into C code (array initializers that can be turned into code objects using the marshal module) and creates a custom-made config file that only contains those built-in modules which are actually used in the program. It then compiles the generated C code and links it with the rest of the Python interpreter to form a self-contained binary which acts exactly like your script.

Obviously, freeze requires a C compiler. There are several other utilities which don’t. One is Thomas Heller’s py2exe (Windows only) at

http://www.py2exe.org/
Another tool is Anthony Tuininga’s cx_Freeze.

